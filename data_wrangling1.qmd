---
title: "Data Wrangling 1"
format: html
editor: visual
---

I loaded up tidyverse and installed/loaded the new package "skimr". <br> I also loaded in the dataset from github.

```{r include=FALSE}
library(tidyverse)
```

```{r include=FALSE}
#install.packages("skimr")
library(skimr)
```

```{r}
coronavirus <- read_csv('https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv')
```

I used the summary() function from tidyverse (?)

```{r}
summary(coronavirus)
```

I used skimr to get another summary of the data.

```{r include=FALSE}
skim(coronavirus)
```

you could also use the view() function if not in a quarto document head() will give you the first few datapoints, and tail() will give you the last few datapoints. <br>

Now, we will learn about funtions we can use to clean up the data.

```{r}
filter(coronavirus, cases > 0)
```

filtering the data so that only datapoints with cases are shown makes the dataset much smaller. <br> you can also filter the data so that only the datapoints in the US are shown

```{r}
filter(coronavirus, country == "US")
```

when putting in the variable name, you don't need to put it in quotations, only the actual thing you're searching in the variable is a text string. <br> now, we are going to filter the dataset so that it includes every datapoint BUT the ones in the US

```{r}
filter(coronavirus, country != "US")
```

now, you can make a variable so that it is all the US cases.

```{r}
coronavirus_us <- filter(coronavirus, country == "US")
```

You can filter the data using "and" and "or" categorizations. "\|" is or, and & is and (or you can use commas). The first code chunk has two options that are both "or". The second code chunk has "and" options.

```{r}
#filter(coronavirus, country == "US" | country == "Canada")
filter(coronavirus, country %in% c("US", "Canada"))
```

```{r}
filter(coronavirus, country == "US" & "Canada")
filter(coronavirus, country == "US", "Canada")
```

## Exercise 1b

```{r}
filter(coronavirus, country %in% c("Denmark", "Italy", "Spain"), type == "death", date == "2021-09-16")
```

You can also change the "vew" function to only show certain parts of the dataset.

```{r eval=FALSE}
View(count(coronavirus, country))
```

Then we learned about the select() function.

```{r}
select(coronavirus, type, cases, date, country)
select(coronavirus, ~province)
```

you can index by numbers, but if anyone changes the dataset this code will become useless, so it is smart to avoid it when possible.