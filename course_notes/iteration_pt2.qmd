---
title: "iteration_pt2"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(gapminder)
```


```{r}
est <- read_csv('https://raw.githubusercontent.com/OHI-Science/data-science-training/master/data/countries_estimated.csv')
```

```{r}
#gapminder <- gapminder |>
  #rename("life_exp" = lifeExp, "gdp_per_cap" = gdpPercap)


#gapminder_est <- gapminder |> 
  #left_join(est)
view(gapminder_est)

```


```{r}
cntry <- "Belgium"
country_list <- c("Albania", "Canada", "Spain")

dir.create("figures")
dir.create("figures/europe")

country_list <- unique(gapminder$country)

gap_europe <- gapminder_est |>
  filter(continent == "Europe") |>
  mutate(gdp_tot = gdp_per_cap * pop)

country_list <- unique(gap_europe$country)

length(country_list)
```

```{r}
cntry <- "Belgium"

for (cntry in country_list) {
  
print(str_c("Plotting ", cntry))  
  
gap_to_plot <- gap_europe |>
  filter(country == cntry)

my_plot <- ggplot(data = gap_to_plot, mapping = aes(x = year, y = gdp_tot)) +
  geom_point() +
  labs(title = str_c(cntry, "GDP", sep = " "),
       subtitle = ifelse(any(gap_to_plot$estimated == "yes"), "Estimated data", "Reported data"))

# if(any(gap_to_plot$estimated == "yes")) {
#   
#   print(str_c(cntry, " data are estimated"))
#   
#   my_plot <- my_plot +
#     labs(subtitle = "Estimated data")
#   
# } else if(any(gap_to_plot$estimated == "no")) {
#   
#   print(str_c(cntry, " data are reported"))
#   
#   my_plot <- my_plot +
#     labs(subtitle = "Reported data")
# }

ggsave(filename = str_c("figures/europe/", cntry, "_gdp_tot.png", sep = ""), plot = my_plot)
}

```

If and ifelse spatements use similar format to for statements. Perentheses for conditions and then brackets to clarify what you want to do under the conditions. if statements are just if a condition is true, do x, if not do nothing. Ifelse clarifies what to do if the condition is not met.

We wrote code to print a string to the console if the data is estimated to give us an idea of where the loop is.

You don't need to specify conditions for the "else" part of the ifelse statement, if you do it will cause an error. It refers back to the "if" part of the statement and runs for anything that doesn't meet the "if" condition.

You could also do the ifelse function in the ggplot section of the code to simplify the if else statements into one line of code at the beginning. If else statements give you more flexibility, but the ifelse function is more succinct.

Now we are going to make some more simple for loops for practice.

```{r}

for (i in 1:10) {
  print(i)
  
}

```

In this for loop, i can be anything as long as you use it consistently, i is just the usual object to use. 1:10 creates a vector with the numbers from 1 to 10.

```{r}

volumes = c(1.6, 3, 8)

for (volume in volumes) {
  
  mass <- 2.65 * volume ^ 0.9
  print(mass)
}

for (i in 1:3) {
  mass <- 2.65 * i ^ 0.9
  print(mass)
}

for (i in seq_along(volumes)) {
  mass <- 2.65 * volumes[i] ^ 0.9
  print(mass)
}

```

In the first for loop, we originally just did a mathematical computation but we didn't add in any print or call so nothing indicated that the code ran correctly. Then we added print() to do this. Then we added another version of this same loop, and it didn't work originally because we used the word "volume" (it just returned the same number 3 times) instead of i like we had defined in that for loop. In the third loop, we learned to use the function seq_along() to do something the number of times as spots in the vector. We also learned to put the vector with square brackets for the object inside the for loop to pull out the actual values of the vactor instead of just using their numbered positions to do the calculations or functions.

```{r}

masses <- vector("numeric", length = length(volumes))

for (i in seq_along(volumes)) {
  
  masses[i] <- 2.65 * volumes[i] ^ 0.9
  
}

masses
```

```{r}

mass_lbs <- c(2.2, 3.5, 9.6, 1.2)
mass_kgs <- vector("numeric", length = length(mass_lbs))

for (i in seq_along(mass_lbs)) {
  
  mass_kgs[i] <- mass_lbs[i] * 2.2
  
}

mass_kgs

```









