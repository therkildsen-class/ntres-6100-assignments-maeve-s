---
title: "Data import, export, conversion"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

```{r}
library(googlesheets4)
```

```{r}
lotr <- read_csv("https://raw.githubusercontent.com/jennybc/lotr-tidy/master/data/lotr_tidy.csv")
```

```{r}
write_csv(lotr, file = "lotr.csv")
```

We are going to read the file from our personal computer now, there are two ways, you could either call by doing it by working directory or you could put the whole path on your computer (computer path will not work for other people)

```{r}
setwd("/Users/maevestaab/Coding/ntres-6100-assignments-maeve-s")
write_csv(lotr, "data/lotr.csv")
```

It's best not to change the data itself, just tell the computer what to ignore in the data.

Now we're going to read in a google sheets document, and then alter the way R reads it so that it reflects what the data actually looks like.

```{r}
gs4_deauth()
lotr_google <- read_sheet("https://docs.google.com/spreadsheets/d/1X98JobRtA3JGBFacs_JSjiX-4DPQ0vZYtNl_ozqF6IE/edit#gid=754443596", sheet = "deaths", range = "A5:F15")
```

```{r}
lotr_google
```

Now, we are going to fix the variable names so that they are easier to work with.

```{r}
install.packages("janitor")
library(janitor)
```

```{r}
msa <- read_tsv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/main/datasets/janitor_mymsa_subset.txt")
```

```{r}
colnames(msa_clean)
```

```{r}
msa_clean <- clean_names(msa)
```

Next, we are going to parse the data. parse_number() removes anything that isn't a numerical character.

```{r}
parse_number("$100")
```

Numbers can be tricky bc people in different parts of the world write numbers in different ways (ex. some use a period for decimals, some use commas. Also, numbers are sometimes surrounded by other characters (ex. %, \$). Numbers often include "grouping" characters, like commas or periods between thousands place and hundreds place. You can use parse_double to change between decimal place styles. You can use parse_number to take a number separated by commas or periods and change it into a number without grouping marks.

```{r}
parse_double("1,23", locale = locale(decimal_mark = ","))
```
```{r}
parse_number("123.456", locale = locale(grouping_mark = "."))
```

You can specify what formatting the data uses when you read in data. It will not change the data, but will allow the data to be read correctly.

```{r}
mess = read_tsv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/refs/heads/main/datasets/messy_data.tsv", locale = locale(decimal_mark = ","))
```

R automatically reads NA as a lack of data, but you can specify what values in the dataset represent a lack of data. (this code doesn't work yet, she has to troubleshoot it later).

```{r}
mess = read_tsv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/refs/heads/main/datasets/messy_data.tsv", locale = locale(decimal_mark = ","), na = c("Missing", "N/A"))
```

Dates are really tricky. There is a section of the R for data science book on dates and times. 













